#version 330

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void) {

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitCameraVector = normalize(toCameraVector);
	
	float brightness = max(dot(unitLightVector, unitNormal), 0.15);
	vec3 diffuseLight = brightness * lightColor;
	
	vec3 reflectedVector = reflect(-unitLightVector, unitNormal);
	float specularFactor = max(dot(reflectedVector, unitCameraVector), 0.0);
	vec3 specularLight = reflectivity * pow(specularFactor, shineDamper) * lightColor;
	
	vec4 textureColor = texture(textureSampler, passTextureCoords);
	if(textureColor.a < 0.5) {
		discard;
	}
	
	outColor = vec4(diffuseLight, 1.0) * textureColor + vec4(specularLight, 1.0);
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}
