#version 330

in vec2 passTextureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 outColor;

uniform sampler2D blendMap;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D backgroundTexture;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void) {
	
	vec4 blendMapColor = texture(blendMap, passTextureCoords);
	float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledCoords = passTextureCoords * 40.0;
	vec4 backgroundColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
	vec4 totalColor = backgroundColor + rTextureColor + gTextureColor + bTextureColor;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	vec3 unitCameraVector = normalize(toCameraVector);
	
	float brightness = max(dot(unitLightVector, unitNormal), 0.1);
	vec3 diffuseLight = brightness * lightColor;
	
	vec3 reflectedVector = reflect(-unitLightVector, unitNormal);
	float specularFactor = max(dot(reflectedVector, unitCameraVector), 0.0);
	vec3 specularLight = reflectivity * pow(specularFactor, shineDamper) * lightColor;
	
	outColor = vec4(diffuseLight, 1.0) * totalColor + vec4(specularLight, 1.0);
	outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}
